{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/cpp-notes-part-1","result":{"data":{"post":{"__typename":"MdxPost","slug":"/cpp-notes-part-1","title":"C++ Notes: part-1","date":"02.05.2020","tags":[{"name":"C++","slug":"c"}],"description":"literals, types, type-deduction","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"C++ Notes: part-1\",\n  \"date\": \"2020-05-02T00:00:00.000Z\",\n  \"slug\": \"/cpp-notes-part-1\",\n  \"tags\": [\"C++\"],\n  \"description\": \"literals, types, type-deduction\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I had a long dream of learning C++ properly, and due the lockdown during Covid19 pandemic I finally had the chance to review my learnings and fix what I knew wrong. I will be writing notes on C++ to make my learnings persistent. They won't be in depth as other articles of C++ experts. I didn't get any chance to work anywhere as a C++ developer, there might be silly or grave mistakes here and there. For the time being, I will ignore those and just move along to maintain my flow.\"), mdx(\"h2\", null, \"References\"), mdx(\"p\", null, \"Most of the codes are inpired from the book \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leanpub.com/cpplibrary\"\n  }), \"The C++ Standard Library\"), \" by Rainer Grimm and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.cppreference.com/\"\n  }), \"C++ Reference\"), \". I really like his teaching and coding style. He published multiple best C++ books.\"), mdx(\"p\", null, \"Let's begin, shall we?\"), mdx(\"h3\", null, \"Literals\"), mdx(CollapseComponent, {\n    heading: \"Literals\",\n    text: \"Literals are explicit values in the program.\",\n    mdxType: \"CollapseComponent\"\n  }), mdx(\"br\", null), mdx(\"p\", null, \"Value of literal is fixed, it can also be referred as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"constants\"), \". Literal can be value of basic types such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bool\"), \" etc.\"), mdx(\"p\", null, \"Built in C++ literals are shown below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp:title=main.cpp\"\n  }), \"#include <iostream>\\n\\nint main(){\\n  // Unsigned integer\\n  int unsigned_int = u'U';\\n  // Hexadecimal\\n  int hex = 0x2b;\\n  // Raw string\\n  std::string raw = R\\\"(Raw String)\\\";\\n  std::cout << unsigned_int << \\\", \\\" << hex << \\\", \\\" << raw << std::endl;\\n}\\n\")), mdx(\"p\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"85, 42, Raw String\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Literals are not restricted to values, even \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"lambda\"), \" function can be a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"function literal\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"lambda function[](std::string text) { return text.length(); }\\n\")), mdx(\"h3\", null, \"Raw string literals\"), mdx(\"p\", null, \"Anything between the delimiters of raw string becomes a part of the string.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <iostream>\\n\\nconst char* string1 = R\\\"foo(\\n  Hello\\n  World\\n  )foo\\\";\\n\\nint main (){\\n  std::cout << string1 << std::endl;\\n}\\n\\n\")), mdx(\"p\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\n  Hello\\n  World\\n\\n\\n\")), mdx(\"h3\", null, \"User defined literals\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"I had a long dream of learning C++ properly, and due the lockdown during Covid19 pandemic I finally had the chance to review my learningsâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/cpp-notes-part-1","formatString":"DD.MM.YYYY"}}}